# -*- coding: utf-8 -*-
"""
Django settings for dx project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys
from config import confile

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

'''
django 项目配置
配置优先级: 环境变量 > pro.setting / YML > app.conf
环境变量优先级仅支持值类型(str, int, float, bool), 自动转换还原
'''
yml = confile.YML('conf.yml')
try:
    # 将YML默认配置加载到settings
    for key in yml.default_settings:
        # print(key, 44444444444)
        locals()[key] = getattr(yml.default_settings, key)
except Exception:
    pass
# print(TEST_LINES, 88888888)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'g7w4by6-oig(gr&37j6v3#j)5grt&ro-3=u41rdgtmhpn_g70f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", yml.debug) == '1'
INTERNAL_IPS = (
    # 浏览器客户端IP获取SQL调试信息, 传递变量sql_queries到模板上下文
    '127.0.0.1',
)

# ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'suitconf.Config',  # 后台样式，放admin前面，覆盖admin默认样式
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap3',
    'channels',  # websocket
    'django_otp',
    'django_otp.plugins.otp_totp',  # 时间戳
    # 'django_otp.plugins.otp_hotp',

    'ops',
    'generic',  # 通用视图模板
    'cmdb',
    'elfinder',  # 网页sftp
    'term',  # SSH终端
    'guacamole',  # 远程桌面/VNC (proxy_ser, guac_cli)
    # 'readonly',
    # 'dock',

]


# AUTH_USER_MODEL = 'ops.UserProfile'
# AUTH_PROFILE_MODULE = 'ops.UserProfile'

# AUTHENTICATION_BACKENDS = (
#     # 登录和检查状态
#     # 'django.contrib.auth.backends.ModelBackend',  # django默认的backend
#     'ops.backends.MyModelBackend',  # 自定义的权限验证, 增加栏目权限
#     # 'guardian.backends.ObjectPermissionBackend',
#     # 'django.contrib.auth.backends.RemoteUserBackend',
# )


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_otp.middleware.OTPMiddleware',  # OTP验证
    # 'django.contrib.auth.middleware.RemoteUserMiddleware',
    # 'django.contrib.auth.middleware.PersistentRemoteUserMiddleware',

]

ROOT_URLCONF = 'dx.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # 所有页面都需加载的context字典
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # # 'loaders': [
            # #     (
            # #         'django.template.loaders.filesystem.Loader',
            # #         [os.path.join(BASE_DIR, 'templates')],
            # #     ),
            # # ],
            # 'loaders': [
            #     (
            #         'django.template.loaders.app_directories.Loader',
            #         # [os.path.join(BASE_DIR, 'templates')],
            #     ),
            # ],
            # 'libraries': {
            #     'tags': 'templatetags.tags',  # 加载根目录模板标签(左边栏)
            # },
            'builtins': ['templatetags.tags'],  # 加载根目录模板标签(左边栏免load)
        },
    },
]

WSGI_APPLICATION = 'dx.wsgi.application'

ASGI_APPLICATION = "dx.routing.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# 使用sqlite3
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# try:
#     raise
#     import psycopg2
#     # 默认使用PostgreSQL
#     engine = 'django.db.backends.postgresql_psycopg2'
#     options = {
#         'client_encoding': 'UTF8',
#         # 'default_transaction_isolation': 'read committed',
#     }

# except Exception:
#     # 使用MySQL
#     engine = 'django.db.backends.mysql'
#     options = {'charset': 'utf8mb4', 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"}

#     from django.db.backends.mysql.base import DatabaseFeatures
#     DatabaseFeatures.supports_microsecond_precision = False  # mysql5.6+ 时间不要毫秒


# user = 'root'  # 数据库-用户名
# password = '2017'  # 数据库-密码
# host = '192.168.80.236'  # 数据库-主机
# name = 'dx'  # 数据库-库名


# DATABASES = {
#     'default': {
#         'ENGINE': engine,
#         'NAME': name,
#         'USER': user,
#         'PASSWORD': password,
#         'HOST': host,
#         # 'PORT': '5432',
#         # 'TEST': {'NAME': 'test',},
#         'OPTIONS': options,
#     },

# }


MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 终端录像所在目录


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'


USE_I18N = True  # LANGUAGE_CODE: zh-hans

USE_L10N = True

USE_TZ = False

from django.conf.locale.zh_Hans import formats
formats.DATETIME_FORMAT = 'Y-m-d H:i'
# formats.DATETIME_INPUT_FORMATS = 'Y-m-d H:i'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/


STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)


# Channels settings
CHANNEL_LAYERS = {
    "default": {
        # "BACKEND": "channels.layers.InMemoryChannelLayer"
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": ['redis://:%s@%s/%d' % (REDIS[1], REDIS[0], REDIS[2]), ],  # set redis address
            "hosts": [
                f'redis://:{yml.redis.password}@{yml.redis.host}:{yml.redis.port}/{yml.redis.db}',
            ],  # set redis address
            "channel_capacity": {
                "http.request": 1000,
                "websocket.send*": 10000,
            },
            "capacity": 10000,
        },
        "CHANNEL_NAME": "dx.",    # channel路由名称加前缀，以区分多端口
    },
}


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{yml.redis.host}:{yml.redis.port}/{yml.redis.db}',
        'OPTIONS': {
            'PASSWORD': yml.redis.password,
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PARSER_CLASS': 'redis.connection.HiredisParser',
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 200,
                'timeout': 10,
            },
        },
        'KEY_PREFIX': 'dx'
    }
}

BOOTSTRAP3 = {
    # 修改bootstrap3.bootstrap.BOOTSTRAP3_DEFAULTS默认设置
    # 'horizontal_label_class': 'col-md-2', #默认为col-md-3
    # 'horizontal_field_class': 'col-md-8',
}

# logging配置, logging.config.dictConfig(LOGGING字典配置)
log_dir = "logs"
file_name = 'web'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'myformat': {
            'format': '[%(levelname)5s][%(asctime)s]'
                      # '[%(filename)s:%(lineno)d]'
                      ' %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            # 'style': '%',
        },
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d]'
                      '[task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s] %(message)s'
        },
        'collect': {
            'format': '%(message)s'
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',
            'formatter': 'myformat'
        },
        'SF': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{file_name}_info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 备份数为3  xx.log --> xx.log.1 --> xx.log.2 --> xx.log.3 --> 删
            'formatter': 'myformat',
            'encoding': 'utf-8',
        },
        'TF': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，根据时间自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{file_name}_info.log"),  # 日志文件
            'backupCount': 3,  # 备份数为3  xx.log --> xx.log.2018-08-23_00-00-00 --> xx.log.2018-08-24_00-00-00 --> ...
            'when': 'D',  # 每天一切， 可选值有S/秒 M/分 H/小时 D/天 W0-W6/周(0=周一) midnight/如果没指定时间就默认在午夜
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{file_name}_err.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 5,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'collect': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, log_dir, f"{file_name}_collect.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        }
    },
    'loggers': {
        '': {
            # root/根, getLogger()
            # 所有其它logger (propagate=1)都会递归发到根logger
            'handlers': [
                'SF',
                'console',
                'error',
            ],
            # 'level': 'DEBUG',
            'level': os.environ.get("LOG_LEVEL", yml.log_level),
        },
        'sshd': {
            # 堡垒机, getLogger('sshd')
            'handlers': ['console'],
            # 'level': 'DEBUG',
            'level': os.environ.get("LOG_LEVEL", yml.log_level),
            'propagate': False,  # 默认True, 日志递归传送到上一级
        },

    },
}


del yml


# def __getattr__(attr):
#     '''
#     settings.attr 不存在时, 从环境变量取值,
#     py版本最低要求python3.7 (PEP 562)
#     不支持__getattribute__, 也就是不支持环境变量优先于settings.attr.
#     '''
#     # print(attr, 111111)
#     try:
#         return os.environ[attr.upper()]
#     except KeyError:
#         raise AttributeError


__settings__ = sys.modules[__name__]


class SettingsObject:
    '''
    配置优先级: 环境变量 > pro.setting / YML
    settings文件模块转py对象, 以支持__getattribute__,
    使外部取配置 settings.attr时, 优先从环境变量取值,
    当环境变量不存在时, 才取 settings.attr
    '''

    def __getattribute__(self, attr):
        # print(attr, 1111111)
        try:
            sett_val = getattr(__settings__, attr)
            attr_error = None
        except AttributeError as e:
            attr_error = e

        val_type = None if attr_error else type(sett_val)
        if attr.isupper() and val_type in (None, str, int, float, bool):
            # 优先使用环境变量
            try:
                env_val = os.environ[attr]
            except KeyError:
                pass
            else:
                # 有配置环境变量, 但环境变量值都是字符串, 需还原类型.
                if val_type:
                    if val_type is bool and env_val.lower() in ('0', 'false', 'none', 'null'):
                        return False
                    return val_type(env_val)
                else:
                    # settings未配置, 直接返回环境变量配置
                    return env_val

        if attr_error:
            raise attr_error
        else:
            return sett_val


sys.modules[__name__] = SettingsObject()

